class cars:
    def __init__(self,marka,model,renk):
        self.marka = marka
        self.model = model
        self.renk = renk

araba1=cars("Renault","Clio","Beyaz")
araba2=cars("Honda","Civic","Metalik Gri")

print(f"Seçtiğiniz Araba'nın Markası : {araba1.marka}, Modeli {araba1.model} Rengi : {araba1.renk}'dir...")
print(f"Seçtiğiniz Araba'nın Markası : {araba2.marka}, Modeli {araba2.model} Rengi : {araba2.renk}'dir...")

###########################################################################################################3
İnherit Miras alma işlemi

class Personel ():
    def __init__(self,ad,soyad):
        self.ad = ad
        self.soyad=soyad
        
class Akademik_personel(Personel):#İnherit miras alma işlemi
    def __init__(self,ad,soyad,görev):# Bunu üstten al ve eklencek variable de ekle (görev) gibi
        super().__init__(ad,soyad)#Bunu ebeveyn sınıftan çektik
        self.görev=görev#Bunu yeni ekledik

akademikPersonel=Akademik_personel("Gökhan","Altay","İdari İşler")
print(f"{akademikPersonel.ad}-{akademikPersonel.soyad}-{akademikPersonel.görev}")
###########################################################################################################3
Miras alma işleminde alt class içerisine miras aldıgın fonksiyon ile ana class ila aynı ise ebeveyn class dan aldıgın fonksiyonu ezer.

class Animal():
    def __init__(self,name,alive):
        self.name=name
        self.alive=alive
    def cat(self):
        print(f"{self.name} is eating")
    def sleep(self):
        print(f"{self.sleep} is sleeping")

class Dog(Animal):
    pass
class Cat (Animal):
    pass
class Rabbit(Animal):
    def sleep(self):
        print(f"{self.sleep} not is sleeping")#metot ezdik.
################################################################################################################
Magic (Sihirli Metotlar)
İçeriğe geç
Sohbet geçmişi

Şunu dedin:
python da magic metotlar hakkında bilgi verebilir misin basit ama içeriği güzel bir şekilde
ChatGPT:
Tabii! Python’da magic methods (veya dunder methods) denen sihirli metotlar, özel isimlendirilmiş metotlardır. Asıl isimleri “double underscore methods” (çift alt çizgi) çünkü genellikle iki alt çizgiyle başlar ve biterler: __init__, __str__, __len__ gibi.

Bu metotlar, Python’daki bazı özelleştirilmiş davranışları tanımlamana olanak verir. Örneğin:

nesne oluşturulurken

toplama, çıkarma gibi operatörler çalıştırılırken

nesne stringe çevrilirken

koleksiyon gibi davranması istenirken

Bazı Önemli Magic Methods
1. __init__
Nesne ilk oluşturulduğunda çağrılır.

class Kisi:
    def __init__(self, isim, yas):
        self.isim = isim
        self.yas = yas

ali = Kisi("Ali", 25)
print(ali.isim)  # Ali
2. __str__
print() veya str() çağrıldığında dönecek insan-okur biçimindeki yazıyı belirler.

class Kisi:
    def __init__(self, isim):
        self.isim = isim

    def __str__(self):
        return f"Kişinin Adı: {self.isim}"

ali = Kisi("Ali")
print(ali)  # Kişinin Adı: Ali
3. __repr__
Nesnenin temsilini verir. Geliştirici dostudur, debug sırasında iş görür.

class Kisi:
    def __init__(self, isim):
        self.isim = isim

    def __repr__(self):
        return f"Kisi('{self.isim}')"

ali = Kisi("Ali")
print(repr(ali))  # Kisi('Ali')
4. __len__
len() çağrıldığında devreye girer.

class Kitap:
    def __init__(self, sayfa_sayisi):
        self.sayfa_sayisi = sayfa_sayisi

    def __len__(self):
        return self.sayfa_sayisi

k = Kitap(300)
print(len(k))  # 300
5. __add__
+ operatörünü özelleştirir.

class Sayac:
    def __init__(self, deger):
        self.deger = deger

    def __add__(self, diger):
        return Sayac(self.deger + diger.deger)

    def __str__(self):
        return str(self.deger)

a = Sayac(10)
b = Sayac(20)
c = a + b
print(c)  # 30
6. __getitem__, __setitem__
Bir nesneyi liste/dictionary gibi erişilebilir yapmak için.

class Koleksiyon:
    def __init__(self):
        self.veri = {}

    def __setitem__(self, anahtar, deger):
        self.veri[anahtar] = deger

    def __getitem__(self, anahtar):
        return self.veri[anahtar]

k = Koleksiyon()
k["renk"] = "mavi"
print(k["renk"])  # mavi
7. __call__
Bir nesneyi fonksiyon gibi çağırmanı sağlar.

class Selam:
    def __call__(self, isim):
        return f"Merhaba, {isim}!"

s = Selam()
print(s("Ali"))  # Merhaba, Ali!
8. __del__
Nesne yok edilirken (ör. program kapanırken) çağrılır.

class Dosya:
    def __del__(self):
        print("Dosya kapatılıyor...")

d = Dosya()
del d
# Çıktı: Dosya kapatılıyor...
Neden Magic Methods Kullanılır?
✅ Kod daha kısa, temiz ve Python’a daha uyumlu olur.
✅ Kendi sınıflarını Python’un yerleşik davranışlarıyla uyumlu hâle getirirsin.
✅ Operatörleri ve fonksiyonları (len, str vs.) özelleştirebilirsin.

Örneğin kendi sınıfını bir sayı gibi toplamak, bir liste gibi erişmek, print ile güzel basmak istersen magic metotlar harika araçlardır.

Magic metotlar, Python’da objelerin arkasındaki büyüyü sağlar. Böylece senin yazdığın sınıflar, dilin doğal bir parçası gibi davranır.

Başka bir magic method örneği veya belirli kullanım görmek ister misin?




Dosya seçilmediDosya seçilmedi
ChatGPT hata yapabilir. Önemli bilgileri kontrol edin.

###########################################################################################################3
Encaplütasiyon - Kapsülleme

public Herkese Açık
protected Sınıf ve alt sınıflardan ulaşılır _ ile belitilir
private sadce class içerisinden erişilir. __ile belirtilir.


örnekler 

class Calisan:
    def __init__(self, maas):
        self.__maas = maas

    def maas_goster(self):
        return self.__maas

class Mudur(Calisan):
    def zam_yap(self, oran):
        # self.__maas += self.__maas * oran  # HATA! __maas gizlidir.
        # Doğrusu:
        yeni_maas = self.maas_goster() * (1 + oran)
        print(f"Yeni maaş: {yeni_maas}")

m = Mudur(5000)
m.zam_yap(0.1)  # Yeni maaş: 5500.0


class Sepet:
    def __init__(self):
        self.__urunler = []

    def urun_ekle(self, urun):
        if isinstance(urun, str) and urun:
            self.__urunler.append(urun)
        else:
            print("Geçersiz ürün ismi.")

    def sepeti_goster(self):
        return self.__urunler

# Kullanım
s = Sepet()
s.urun_ekle("Laptop")
s.urun_ekle("")
print(s.sepeti_goster())    # ['Laptop']


class Ogrenci:
    def __init__(self, isim, not_ort):
        self.__isim = isim
        self.__not_ort = not_ort

    @property
    def not_ort(self):
        return self.__not_ort

    @not_ort.setter
    def not_ort(self, deger):
        if 0 <= deger <= 100:
            self.__not_ort = deger
        else:
            print("Not ortalaması 0-100 arasında olmalıdır.")

# Kullanım
ogr = Ogrenci("Zeynep", 85)
print(ogr.not_ort)         # 85

ogr.not_ort = 92
print(ogr.not_ort)         # 92

ogr.not_ort = -10         # Not ortalaması 0-100 arasında olmalıdır.
###########################################################################################################3
Abstcract class ( Soyut Sınıf)
Python'da abstract method (soyut metot), bir sınıf içinde tanımlanır ama gövdesi (içeriği) yazılmaz. Alt sınıfların bu metodu mutlaka override (üstüne yazmak) etmesi gerekir. Abstract method'lar abc (Abstract Base Classes) modülü kullanılarak tanımlanır.

İşte basit bir örnek:

from abc import ABC, abstractmethod

# Soyut sınıf tanımı
class Sekil(ABC):
    
    @abstractmethod
    def alan(self):
        pass

    @abstractmethod
    def cevre(self):
        pass

# Somut sınıf (soyut metotları override etmek zorunda)
class Dikdortgen(Sekil):
    def __init__(self, genislik, yukseklik):
        self.genislik = genislik
        self.yukseklik = yukseklik

    def alan(self):
        return self.genislik * self.yukseklik

    def cevre(self):
        return 2 * (self.genislik + self.yukseklik)

# Kullanım
d = Dikdortgen(5, 10)
print("Alan:", d.alan())
print("Çevre:", d.cevre())

Önemli Noktalar:
Sekil sınıfı bir soyut sınıftır (çünkü ABC sınıfından türemiştir).

@abstractmethod dekoratörü, o metodun alt sınıflarda tanımlanmasını zorunlu kılar.

Python’da duck typing şu anlama gelir: Bir nesnenin türüne değil, o nesnenin hangi metotlara veya özelliklere sahip olduğuna bakarak işlem yapmak.

Adını “Eğer bir kuş gibi yürüyorsa, kuş gibi ötüyorsa, o zaman kuştur” (If it walks like a duck and quacks like a duck, then it’s a duck) sözünden alır.

Duck Typing’in Temeli:
Python’da tür kontrolü yapmak yerine, nesnenin ihtiyacınız olan davranışı (method/property) sergileyip sergilemediğine bakarsınız.


class Ordek:
    def uc(self):
        print("Ordek uçuyor")

class Kus:
    def uc(self):
        print("Kuş uçuyor")

def ucus_testi(hayvan):
    hayvan.uc()  # Burada tip kontrolü yok, sadece uc metodu var mı diye davranışa bakılıyor

ork = Ordek()
kus = Kus()

ucus_testi(ork)  # Ordek uçuyor
ucus_testi(kus)  # Kuş uçuyor
------------------------------------------------------------------------------------------------
class Araba:
    def hareket_et(self):
        print("Araba gidiyor")

class Bisiklet:
    def hareket_et(self):
        print("Bisiklet sürülüyor")

def hareket_et_test(obj):
    obj.hareket_et()

araba = Araba()
bisiklet = Bisiklet()

hareket_et_test(araba)    # Araba gidiyor
hareket_et_test(bisiklet) # Bisiklet sürülüyor

